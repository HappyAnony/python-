#!/usr/bin/env python
# -*-coding :uft-8 -*-
# Author:Anony
# 参考文档：http://www.cnblogs.com/alex3714/articles/5188179.html

# 封装：隐藏代码的实现细节，模块化代码，从而实现代码重用
# 封装时传入的参数可以是任意对象，即任何实例化的类，此时可以间接实现不同类之间关联

class test:
	num = 123 # 类变量【静态属性=公有属性】，存放在类内存中中，作用域是类
	name = "jack"
	n_list = []
	__height = 170 # 此处是私有属性，私有类变量，只能在类内部才能访问和修改。调用时，前面需要加上类名

	'''析构函数
	（1） __init__方法的名称叫做构造函数
	（2）作用：在实例化时做一些类的初始化的工作：分配一段内存空间存放所有传入的数据，并指定一个对象对其进行引用
	'''
	def __init__(self,name,sex):   # 实例化类时，传入的参数只能由__init__方法接收
		self.name = name # 实例变量【静态属性=私有属性】，存放在实例化的对象中，作用域是实例对象本身。随处可修改
		self.__sex = sex      # 此处__sex是私有属性【私有实例变量】，只能在类内部才能访问和修改。变量名前加上__的都是私有属性


	'''析构函数
	（1）__del__方法的名称叫做析构函数
	（2）作用：在实例释放时【手动del对象实例或者程序退出】自动执行，常用作于一些收尾工作，如：关闭一些数据库链接、打开的临时文件
	'''
	def __del__(self):
		pass


	def __show(self):   # 私有方法，类外部不能直接调用，可以在类内部被调用，调用时需要前面加上类名
		print("the sex of %s:%s" %(self.name,self.__sex))
		print(test.__height)    # 内部引用类变量前面需要加上类名


	def showall(self):
		test.__show(self)  # 调用私有方法，传入self参数【实例化对象】


	def test1(self):     # 方法【动态属性】，存放在类内存中，作用域是类
		print("in the %s" %self.name)

n = test("anony","man")  # 类的实例化：把一个类转换成一个具体对象的过程
# 上述表达式python内部会自动转换成：test.__init__(n,"anony")
# 将对象n当做参数传给test类中的__init__方法，所以需要用self进行接收
# __init__方法所做的操作：开辟一段内存空间，存放传入的参数值，返回一个内存地址，通过对象n进行引用

n.test1()
# 上述表达式python内部会自动转换成：test.test1(n)
# 直接调用test下的test1方法，将对象n作为参数传入，这样test1函数可以调用对象n所指内存空间中的所有数据



#******************************************修改私有属性(实例变量或在类变量)****************************************************
'''
n.showall()
'''


#******************************************修改实例变量【非私有属性】****************************************************
'''
print(n.name)
print(n.num)
n.name = "mary" # 可以在外部修改对象的属性值
n.age = 22      # 可以在外部给对象添加新属性
print(n.name)
print(n.age)
del(n.age) # 也可以在外部删除对象已有的属性
# print(n.age)
'''



#******************************************修改类变量【非私有属性】****************************************************
'''
# 对象实例可以修改类变量的值
# 当类变量是不可变类型时，其本质是在自己的内存空间中添加一个相同的新属性，不会修改类变量的值，因为不可变类型变量不支持原处修改
# 所以此时不会影响其它对象实例对类变量的调用
n.num = 87
print(n.num)
n1 = test("koo","man")
print(n1.num)

# 当类变量是可变类型时，其本质就是直接修改类变量原来的值，因为可变类型变量支持原处修改
# 所以此时会影响其它对象实例对类变量的调用
print(n.n_list)
print(n1.n_list)
n1.n_list.append("from n1")
n.n_list.append("from n")
print(n.n_list)
print(n1.n_list)
print(test.n_list)
'''




# 综述所述：
# 实例化类的本质就是：调用类下的__init__方法，分配一段内存空间存放所有数据，并指定一个对象对其进行引用
# 只有将类实例化成对象后，才能调用属性和方法。因为只有实例化成对象后，才有可访问和操作的数据
# 不同对象的属性是存放在自己的内存空间中
# 不同对象的方法是共享类的内存空间
#
# 注意：
# （1）对象实例调用属性时，对象属性【实例变量】优先级大于类属性【类变量】
# （2）对象实例可以调用类属性，同时也可以修改类属性，其本质是在自身内存中添加一个相同的对象属性，所以不影响其它对象实例对类属性的调用




















